#!/bin/bash
set -e -x

# To get consistent builds, files generated by the original build system are
# also committed. This script executes the build system and copies those files
# to `generated/`.

# Running this script is only necessary when updating the dependency in the
# repository, and it's rather much dependant on the environment.

# Updating the dependency involves updating the submodule, running this script,
# and carefully reviewing submodule changes for things that need to be
# reflected in the project build settings.


# Yasm version we're targetting. Should match the submodule.
VERSION="1.2.0"


# Create scratch directory.
SCRATCH="`dirname $0`/../_scratch"
mkdir -p $SCRATCH
cd $SCRATCH

# Download the tarball.
BASENAME="yasm-${VERSION}"
TARBALL="${BASENAME}.tar.gz"
if [ ! -e "${TARBALL}" ]; then
    wget "http://www.tortall.net/projects/yasm/releases/${TARBALL}"
fi

# Unpack (and trash old scratch dir)
rm -fr "${BASENAME}"
tar -xzf "${TARBALL}"
cd "${BASENAME}"

# Run configure and make on specific files.
TOMAKE="
    gas-token.c license.c module.c nasm-macros.c nasm-token.c nasm-version.c
    x86cpu.c x86insn_gas.c x86insn_nasm.c x86insns.c x86regtmod.c"
./configure \
    --disable-python \
    --disable-nls
make $TOMAKE

# Strip modules we don't build.
awk '! /yasm_(lc3b|cv8|stabs|dbg|bin|dosexe|elf|elf32|elf64|coff|rdf|win32|win64|x64|xdf)_LTX/ { print $0 }' \
    < module.c > _module.c
mv _module.c module.c

# Copy generated files.
OUT="../../yasm/generated"
mkdir -p "${OUT}/"
cp config.h libyasm-stdint.h "${OUT}/"
cp $TOMAKE "${OUT}/"
